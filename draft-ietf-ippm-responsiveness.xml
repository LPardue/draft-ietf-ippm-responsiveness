<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-ietf-ippm-responsiveness-02" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Responsiveness under Working Conditions">Responsiveness under Working Conditions</title>

    <author initials="C." surname="Paasch" fullname="Christoph Paasch">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cpaasch@apple.com</email>
      </address>
    </author>
    <author initials="R." surname="Meyer" fullname="Randall Meyer">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>rrm@apple.com</email>
      </address>
    </author>
    <author initials="S." surname="Cheshire" fullname="Stuart Cheshire">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cheshire@apple.com</email>
      </address>
    </author>
    <author initials="W." surname="Hawkins" fullname="Will Hawkins">
      <organization>University of Cincinnati</organization>
      <address>
        <email>hawkinwh@ucmail.uc.edu</email>
      </address>
    </author>

    <date year="2023" month="October" day="16"/>

    <area>Transport</area>
    <workgroup>IP Performance Measurement</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>For many years, a lack of responsiveness, variously called
lag, latency, or bufferbloat, has been recognized
as an unfortunate, but common, symptom in today's networks.
Even after a decade of work on standardizing technical solutions,
it remains a common problem for the end users.</t>

<t>Everyone "knows" that it is "normal" for a video conference to
have problems when somebody else at home is
watching a 4K movie or uploading photos from their phone.
However, there is no technical reason for this to be the case.
In fact, various queue management solutions
have solved the problem.</t>

<t>Our networks remain unresponsive, not from a lack of technical solutions,
but rather a lack of awareness of the problem and deployment of its solutions.
We believe that creating a tool that measures the problem and matches people's
everyday experience will create the necessary awareness,
and result in a demand for solutions.</t>

<t>This document specifies the "Responsiveness Test" for measuring responsiveness.
It uses common protocols and mechanisms to measure user
experience specifically when the network is under working conditions.
The measurement is expressed as "Round-trips Per Minute" (RPM)
and should be included with throughput (up and down) and
idle latency as critical indicators of network quality.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>For many years, a lack of responsiveness, variously called
lag, latency, or bufferbloat, has been recognized
as an unfortunate, but common, symptom in today's networks <xref target="Bufferbloat"/>.
Solutions like fq_codel <xref target="RFC8290"/>, PIE <xref target="RFC8033"/> or L4S <xref target="RFC9330"/> have been standardized
and are to some extent widely implemented.
Nevertheless, people still suffer from bufferbloat.</t>

<t>Although significant, the impact on user experience can be transitory --
that is, its effect is not always visible to the user.
Whenever a network is actively being used at its full capacity,
buffers can fill up and create latency for traffic.
The duration of those full buffers may be brief:
a medium-sized file transfer, like an email attachment
or uploading photos,
can create bursts of latency spikes.
An example of this is lag occurring during a videoconference,
where a connection is briefly shown as unstable.</t>

<t>These short-lived disruptions make it hard to narrow down the cause.
We believe that it is necessary to create a standardized way to
measure and express responsiveness.</t>

<t>Including the responsiveness-under-working-conditions test
among other measurements of network quality (e.g., throughput
and idle latency) would raise awareness of the problem and
establish the expectation among users that their network providers deploy
solutions.</t>

<section anchor="terminology"><name>Terminology</name>

<t>A word about the term "bufferbloat" -- the undesirable latency
that comes from a router or other network equipment
buffering too much data.
This document uses the term as a general description of bad latency,
using more precise wording where warranted.</t>

<t>"Latency" is a poor measure of responsiveness,
because it can be hard for the general public to understand.
The units are unfamiliar ("what is a millisecond?") and
counterintuitive ("100 msec -- that sounds good --
it's only a tenth of a second!").</t>

<t>Instead, we define the term "responsiveness under working conditions"
to make it clear that we are measuring all, not just idle, conditions,
and use "round-trips per minute" as the unit.
The advantage of using round-trips per minute as the unit are two-fold: First, it allows for a unit
that is "the higher the better". This kind of unit is often more intuitive for end-users.
Second, the range of the values tends to be around the 4-digit integer range which
is also a value easy to compare and read, again allowing for a more intuitive use.
Finally, we abbreviate the unit to "RPM", a wink to the
"revolutions per minute" that we use for car engines.</t>

<t>This document defines an algorithm for the "Responsiveness Test"
that explicitly measures responsiveness under working conditions.</t>

</section>
</section>
<section anchor="design-constraints"><name>Design Constraints</name>

<t>There are many challenges to defining measurements of the Internet:
the dynamic nature of the Internet,
the diverse nature of the traffic,
the large number of devices that affect traffic,
the difficulty of attaining appropriate measurement conditions,
diurnal traffic patterns,
and changing routes.</t>

<t>In order to minimize the effects of these challenges, 
it's best to keep the test duration relatively short.</t>

<t>TCP and UDP traffic, or traffic on ports 80 and 443, may take
significantly different paths over the network between source and destination
and be subject to entirely different Quality of Service (QoS) treatment.
A good test will use standard transport-layer traffic -- typical
for people's use of the network --
that is subject to the transport layer's congestion control algorithms 
that might reduce the traffic's rate and thus its buffering in the network.</t>

<t>Traditionally, one thinks of bufferbloat happening in the network, i.e., on
routers and switches of the Internet.
However, the networking stacks of the clients and servers can
have huge buffers.
Data sitting in TCP sockets or waiting for the application
to send or read causes artificial latency, and affects user experience
the same way as in-network bufferbloat.</t>

<t>Finally, it is crucial to recognize that significant
queueing only happens on entry to the lowest-capacity
(or “bottleneck”) hop on a network path.
For any flow of data between two endpoints
there is always one hop along the path where the capacity
available to that flow at that hop is the lowest among
all the hops of that flow’s path at that moment in time.
It is important to understand that the existence of a
lowest-capacity hop on a network path and a buffer to smooth bursts
of data is not itself a problem.
In a heterogeneous network like the Internet it is
inevitable that there must necessarily be some hop
along the path with the lowest capacity for that path.
If that hop were to be improved, then some other hop would
become the new lowest-capacity hop for that path.
In this context a “bottleneck” should not be seen as a problem to
be fixed, because any attempt to “fix” the bottleneck is futile --
such a “fix” can never remove the existence of a bottleneck
on a path; it just moves the bottleneck somewhere else.
Arguably, this heterogeneity of the Internet is one of its greatest strengths.
Allowing individual technologies to evolve and improve at their
own pace, without requiring the entire Internet to change in
lock-step, has enabled enormous improvements over the years
in technologies like DSL, cable modems, Ethernet, and Wi-Fi,
each advancing independently as new developments became ready.
As a result of this flexibility we have moved incrementally,
one step at a time, from 56kb/s dial-up modems in the 1990s to
Gb/s home Internet service and Gb/s wireless connectivity today.</t>

<t>Note that in a shared datagram network, conditions do not remain static.
The hop that is the current bottleneck may change from moment to moment.
For example, changes in simultaneous traffic may result in changes
to a flow’s share of a given hop. A user moving around
may cause the Wi-Fi transmission rate to vary widely,
from a few Mb/s when far from the Access Point,
all the way up to Gb/s or more when close to the Access Point.</t>

<t>Consequently, if we wish to enjoy the benefits of the Internet’s great
flexibility, we need software that embraces and celebrates this
diversity and adapts intelligently to the varying conditions it encounters.</t>

<t>Because significant queueing only happens on entry to the bottleneck
hop, the queue management at this critical hop of the path almost
entirely determines the responsiveness of the entire flow.
If the bottleneck hop’s queue management algorithm allows an
excessively large queue to form, this results in excessively large
delays for packets sitting in that queue awaiting transmission,
significantly degrading overall user experience.</t>

<t>In order to discover the depth of the buffer at the bottleneck hop,
the proposed Responsiveness Test mimics normal network operations and data transfers,
with the goal of filling the bottleneck buffer to capacity, and then
measures the resulting end-to-end latency under these so-called working conditions.
A well-managed bottleneck queue keeps its occupancy
under control, resulting in consistently low round-trip times
and consistently good responsiveness.
A poorly managed bottleneck queue will not.</t>

</section>
<section anchor="goals"><name>Goals</name>

<t>The algorithm described here defines a Responsiveness Test that serves as a good
proxy for user experience. Therefore:</t>

<t><list style="numbers">
  <t>Because today's Internet traffic primarily uses HTTP/2 over TLS, the test's
algorithm should use that protocol.  <vspace blankLines='1'/>
As a side note: other types of traffic are gaining in popularity (HTTP/3)
and/or are already being used widely (RTP).
Traffic prioritization and QoS rules on the Internet may
subject traffic to completely different paths:
these could also be measured separately.</t>
  <t>Because the Internet is marked by the deployment of countless middleboxes like
transparent TCP proxies or traffic prioritization for certain types of traffic,
the Responsiveness Test algorithm must take into account their effect on
TCP-handshake <xref target="RFC0793"/>, TLS-handshake, and request/response.</t>
  <t>Because the goal of the test is to educate end users, the results should be expressed in an intuitive, nontechnical form
and not commit the user to spend a significant amount of their time (we target 20 seconds).</t>
</list></t>

</section>
<section anchor="measuring-responsiveness-under-working-conditions"><name>Measuring Responsiveness Under Working Conditions</name>

<t>Overall, the test to measure responsiveness under working conditions proceeds in two steps:</t>

<t><list style="numbers">
  <t>Put the network connection into "working conditions"</t>
  <t>Measure responsiveness of the network.</t>
</list></t>

<t>The following explains how the former and the latter are achieved.</t>

<section anchor="working-conditions"><name>Working Conditions</name>

<t>What are <em>the</em> conditions that best emulate how a network
connection is used? There is no one true answer to this question. It is a
tradeoff between using realistic traffic patterns and pushing the network to
its limits.</t>

<t>The Responsiveness Test defines working conditions as the condition where the path between the
measuring endpoints is utilized at its end-to-end capacity and the queue at the bottleneck link
is at (or beyond) its maximum occupancy. Under these conditions, the network connection's responsiveness
will be at its worst.</t>

<t>The Responsiveness Test algorithm for reaching working conditions combines 
multiple standard HTTP transactions with very large data objects according to realistic traffic patterns
to create these conditions.</t>

<t>This allows to create a stable state of working conditions during which the
bottleneck of the path between client and server has its buffer filled
up entirely, without generating DoS-like traffic
patterns (e.g., intentional UDP flooding). This creates a realistic traffic mix
representative of what a typical user’s network experiences in normal operation.</t>

<t>Finally, as end-user usage of the network evolves to newer protocols and congestion
control algorithms, it is important that the working conditions also can evolve
to continuously represent a realistic traffic pattern.</t>

<section anchor="single-flow-vs-multi-flow"><name>Single-flow vs multi-flow</name>

<t>A single TCP connection may not be sufficient
to reach the capacity and full buffer occupancy of a path quickly.
Using a 4MB receive window, over a network with a 32 ms round-trip time,
a single TCP connection can achieve up to 1Gb/s throughput.
Additionally, deep buffers along the path between the two endpoints may be
significantly larger than 4MB.
TCP allows larger receive window sizes, up to 1GB. However, most transport stacks
aggressively limit the size of the receive window to avoid consuming too much
memory.</t>

<t>Thus, the only way to achieve full capacity and full buffer occupancy on those
networks is by creating multiple connections, allowing to actively fill the
bottleneck's buffer to achieve maximum working conditions.</t>

<t>Even if a single TCP connection would be able to fill the bottleneck's buffer,
it may take some time for a single TCP connection to ramp
up to full speed. One of the goals of the Responsiveness Test is to help the user 
quickly measure their network. As a result, the test must load the network, take its measurements, and then finish
as fast as possible.</t>

<t>Finally, traditional loss-based TCP congestion control algorithms
react aggressively to packet loss by reducing the congestion window.
This reaction (intended by the protocol design) decreases the
queueing within the network, making it harder to determine the
depth of the bottleneck queue reliably.</t>

<t>The purpose of the Responsiveness Test is not to productively move data
across the network in a useful way, the way a normal application does.
The purpose of the Responsiveness Test is, as quickly as possible, to simulate
a representative traffic load as if real applications were doing
sustained data transfers, measure the resulting round-trip time
occurring under those realistic conditions.
Because of this, using multiple simultaneous parallel connections
allows the Responsiveness Test to complete its task more quickly, in a way that
overall is less disruptive and less wasteful of network capacity
than a test using a single TCP connection that would take longer
to bring the bottleneck hop to a stable saturated state.</t>

<t>In this document, we impose an upper bound on the number of parallel load-generating
connections to 16.</t>

</section>
<section anchor="parallel-vs-sequential-uplink-and-downlink"><name>Parallel vs Sequential Uplink and Downlink</name>

<t>Poor responsiveness can be caused by queues in either (or both)
the upstream and the downstream direction.
Furthermore, both paths may differ significantly due to access link
conditions (e.g., 5G downstream and LTE upstream) or routing changes
within the ISPs.
To measure responsiveness under working conditions,
the algorithm must explore both directions.</t>

<t>One approach could be to measure responsiveness in the uplink and downlink
in parallel. It would allow for a shorter test run-time.</t>

<t>However, a number of caveats come with measuring in parallel:</t>

<t><list style="symbols">
  <t>Half-duplex links may not permit simultaneous uplink and downlink traffic.
This restriction means the test might not reach the path's capacity in both directions at once and thus not expose
all the potential sources of low responsiveness.</t>
  <t>Debuggability of the results becomes harder:
During parallel measurement it is impossible to differentiate whether
the observed latency happens in the uplink or the downlink direction.</t>
</list></t>

<t>Thus, we recommend testing uplink and downlink sequentially. Parallel testing
is considered a future extension.</t>

</section>
<section anchor="achieving-full-buffer-utilization"><name>Achieving Full Buffer Utilization</name>

<t>The Responsiveness Test gradually increases the number of TCP connections (known as load-generating connections)
and measures "goodput" (the sum of actual data transferred across all connections in a unit of time)
continuously.
By definition, once goodput is maximized, buffers will start filling up, creating the
"standing queue" that is characteristic of bufferbloat. At this moment the test starts
measuring the responsiveness until it, too, reaches saturation.
At this point we are creating the worst-case scenario within the limits of the
realistic traffic pattern.</t>

<t>The algorithm notes that throughput increases rapidly until TCP
connections complete their TCP slow-start phase.
At that point, throughput eventually stalls,
often due to receive window limitations, particularly in cases of
high network bandwidth, high network round-trip time,
low receive window size, or a combination of all three.
The only means to further increase throughput is by
adding more TCP connections to the pool of load-generating connections.
If new connections leave the throughput the same,
full link utilization has been reached.
At this point, adding more connections will allow to achieve full buffer occupancy.
Responsiveness will gradually decrease from now on, until the buffers
are entirely full and reach stability of the responsiveness as well.</t>

</section>
</section>
<section anchor="test-parameters"><name>Test parameters</name>

<t>A number of parameters serve as input to the test methodology. The following lists
their acronyms and default values. Hereafter the detailed description of the
methodology will explain how these parameters are being used. Experience has shown
that these parameters allow for a low runtime and accurate results among a wide range of environments.</t>

<texttable>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Explanation</ttcol>
      <ttcol align='left'>Default Value</ttcol>
      <c>MAD</c>
      <c>Moving Average Distance (number of intervals to take into account for the moving average)</c>
      <c>4</c>
      <c>ID</c>
      <c>Interval duration at which the algorithm reevaluates stability</c>
      <c>1 second</c>
      <c>TMP</c>
      <c>Trimmed Mean Percentage to be trimmed</c>
      <c>95%</c>
      <c>SDT</c>
      <c>Standard Deviation Tolerance for stability detection</c>
      <c>5%</c>
      <c>MNP</c>
      <c>Maximum number of parallel transport-layer connections</c>
      <c>16</c>
      <c>MPS</c>
      <c>Maximum responsiveness probes per second</c>
      <c>100</c>
      <c>PTC</c>
      <c>Percentage of Total Capacity the probes are allowed to consume</c>
      <c>5%</c>
</texttable>

</section>
<section anchor="measuring-responsiveness"><name>Measuring Responsiveness</name>

<t>Measuring responsiveness while achieving working conditions is a process of continuous measurement.
It requires a sufficiently large sample-size to have confidence in the results.</t>

<t>The measurement of the responsiveness happens by sending probe-requests.
There are two types of probe requests:</t>

<t><list style="numbers">
  <t>An HTTP GET request on a separate connection ("foreign probes").
This test mimics the time it takes for a web browser to connect to a new
web server and request the first element of a web page (e.g., “index.html”),
or the startup time for a video streaming client to launch and begin fetching media.</t>
  <t>An HTTP GET request multiplexed on the load-generating connections ("self probes").
This test mimics the time it takes for a video streaming client
to skip ahead to a different chapter in the same video stream,
or for a navigation client to react and fetch new map tiles
when the user scrolls the map to view a different area.
In a well functioning system fetching new data
over an existing connection should take less time than
creating a brand new TLS connection from scratch to do the same thing.</t>
</list></t>

<t>Foreign probes will provide 3 sets of data-points. First, the duration of the TCP-handshake
(noted hereafter as <spanx style="verb">tcp_f</spanx>).
Second, the TLS round-trip-time (noted <spanx style="verb">tls_f</spanx>). For this, it is important to note that different TLS versions
have a different number of round-trips. Thus, the TLS establishment time needs to be
normalized to the number of round-trips the TLS handshake takes until the connection
is ready to transmit data. And third, the HTTP elapsed time between issuing the GET
request for a 1-byte object and receiving the entire response (noted <spanx style="verb">http_f</spanx>).</t>

<t>Self probes will provide a single data-point for the duration of time between
when the HTTP GET request for the 1-byte object is issued on the load-generating connection and the
full HTTP response has been received (noted <spanx style="verb">http_s</spanx>).</t>

<t><spanx style="verb">tcp_f</spanx>, <spanx style="verb">tls_f</spanx>, <spanx style="verb">http_f</spanx> and <spanx style="verb">http_s</spanx> are all measured in milliseconds.</t>

<t>The more probes that are sent, the more data available for calculation. In order to generate
as much data as possible, the Responsiveness Test specifies that a client issue these probes regularly.
There is, however, a risk that on low-capacity networks the responsiveness probes
themselves will consume a significant amount of the capacity. Because the test mandates
first saturating capacity before probing for responsiveness, we are able to
accurately estimate how much of the capacity the responsiveness probes will consume and never
send more probes than the network can handle.</t>

<t>Limiting the data used by probes can be done by providing an estimate of the number of bytes exchanged for a
responsiveness probe. Taking TCP and TLS overheads into account, we can estimate
the amount of data exchanged for a probe on a foreign connection to be around 5000 bytes.
On load-generating connections we can expect an overhead of no more than 1000 bytes.</t>

<t>Given this information, we recommend that each responsiveness probing interval does
not send more than MPS (Maximum responsiveness Probes per Second - default to 100) probes per second.
The probes should be spread out equally over the duration of the interval with an
equal split between foreign and different load-generating connections. For the probes on
load-generating connections, the connection should be selected randomly for each probe.</t>

<t>This would result in a total amount of data per second of 300 KB or 2400Kb, meaning
a total capacity utilization of 2400 Kbps for the probing.</t>

<t>On high-speed networks, this will provide a significant amount of samples, while at
the same time minimizing the probing overhead.
However, on severely capacity-constrained networks the probing traffic could consume
a significant portion of the available capacity. The Responsiveness Test must
adjust its probing frequency in such a way that the probing traffic does not consume
more than PTC (Percentage of Total Capacity - default to 5%) of the available capacity.</t>

<section anchor="aggregating-the-measurements"><name>Aggregating the Measurements</name>

<t>The algorithm produces sets of 4 times for each probe, namely:
tcp_f, tls_f, http_f, http_l (from the previous section).
The responsiveness evolves over time as buffers gradually reach saturation. Once
the buffers are saturated responsiveness is stable over time. Thus, the aggregation
of the measurements considers the last MAD (Moving Average Distance - default to 4) intervals worth of completed responsiveness probes.</t>

<t>Over the timeframe of these intervals a potentially large number of samples has been collected.
These may be affected by noise in the measurements, and outliers. Thus, to aggregate these
we suggest to use a trimmed mean at the TMP (Trimmed Mean Percentage - default to 95%) percentile, thus providing the following numbers:
TM(tcp_f), TM(tls_f), TM(http_f), TM(http_l).</t>

<t>The responsiveness is then calculated as the weighted mean:</t>

<figure><artwork><![CDATA[
Responsiveness = 60000 /
(1/6*(TM(tcp_f) + TM(tls_f) + TM(http_f)) + 1/2*TM(http_s))
]]></artwork></figure>

<t>This responsiveness value presents round-trips per minute (RPM).</t>

</section>
</section>
<section anchor="final-algorithm"><name>Final Algorithm</name>

<t>Considering the previous two sections, where we explain what the meaning of
working conditions is and the definition of responsiveness, we can design the
final algorithm. In order to measure the worst-case latency we need to transmit
traffic at the full capacity of the path as well as ensure the buffers are filled
to the maximum.
We can achieve this by continuously adding HTTP sessions to the pool of connections
in a ID (Interval duration - default to 1 second) interval. This will ensure that we quickly reach capacity and full
buffer occupancy. First, the algorithm reaches stability for the goodput. Once
goodput stability has been achieved, responsiveness probes are being transmitted
until responsiveness stability is reached.</t>

<t>We consider both, goodput and responsiveness to be stable, when the standard deviation
of the past MAD intervals is within SDT (Standard Deviation Tolerance - default to 5%) of the last of the moving averages.</t>

<t>The following algorithm reaches working conditions of a network
by using HTTP/2 upload (POST) or download (GET) requests of infinitely large
files.
The algorithm is the same for upload and download and uses
the same term "load-generating connection" for each.
The actions of the algorithm take place at regular intervals. For the current draft
the interval is defined as one second.</t>

<t>Where</t>

<t><list style="symbols">
  <t>i: The index of the current interval. The variable i is initialized to 0 when the algorithm begins and
increases by one for each interval.</t>
  <t>moving average aggregate goodput at interval p: The number of total bytes of data transferred within
interval p and the MAD - 1 immediately preceding intervals, divided by MAD times the interval duration.</t>
</list></t>

<t>the steps of the algorithm are:</t>

<t><list style="symbols">
  <t>Create a load-generating connection.</t>
  <t>At each interval:
  <list style="symbols">
      <t>Create an additional load-generating connection.</t>
      <t>If goodput has not saturated:
      <list style="symbols">
          <t>Compute the moving average aggregate goodput at interval i as current_average.</t>
          <t>If the standard deviation of the past MAD average goodput values is less than SDT of the current_average, declare saturation and move on to probe responsiveness.</t>
        </list></t>
      <t>If goodput has saturated:
      <list style="symbols">
          <t>Compute the responsiveness at interval i as current_responsiveness.</t>
          <t>If the standard deviation of the past MAD responsiveness values is less than SDT of the current_responsiveness, declare saturation and report current_responsiveness.</t>
        </list></t>
    </list></t>
</list></t>

<t>In <xref target="goals"/>, it is mentioned that one of the goals is that the test finishes within
20 seconds. It is left to the implementation what to do when stability is not reached
within that time-frame. For example, an implementation might gather a provisional
responsiveness measurement or let the test run for longer.</t>

<t>Finally, if at any point one of these connections terminates with an error, the test should be aborted.</t>

<section anchor="confidence-of-test-results"><name>Confidence of test-results</name>

<t>As described above, a tool running the algorithm typically defines a time-limit for
the execution of each of the stages. For example, if the tool allocates a total
run-time of 40 seconds, and it executes a full downlink followed by a uplink test,
it may allocate 10 seconds to each of the saturation-stages (downlink capacity saturation, downlink responsiveness saturation, uplink capacity saturation, uplink responsiveness saturation).</t>

<t>As the different stages may or may not reach stability, we can define a "confidence score"
for the different metrics (capacity and responsiveness) the methodology was able to measure.</t>

<t>We define "Low" confidence in the result if the algorithm was not even able to
execute 4 iterations of the specific stage. Meaning, the moving average is
not taking the full window into account.</t>

<t>We define "Medium" confidence if the algorithm was able to execute at least 4
iterations, but did not reach stability based on standard deviation tolerance.</t>

<t>We define "High" confidence if the algorithm was able to fully reach stability
based on the defined standard deviation tolerance.</t>

<t>It must be noted that depending on the chosen standard deviation tolerance or
other parameters of the methodology and the network-environment it may be that a
measurement never converges to a stable point.
This is expected and part of the dynamic nature of networking and the accompanying
measurement inaccuracies. Which is why the importance of imposing a time-limit
is so crucial, together with an accurate depiction of the "confidence" the methodology
was able to generate.</t>

</section>
</section>
</section>
<section anchor="interpreting-responsiveness-results"><name>Interpreting responsiveness results</name>

<t>The described methodology uses a high-level approach to measure responsiveness.
By executing the test with regular HTTP requests a number of elements come into
play that will influence the result. Contrary to more traditional measurement methods
the responsiveness metric is not only influenced by the properties of the
network but can significantly be influenced by the properties of the client
and the server implementations. This section describes how the different
elements influence responsiveness and how a user may differentiate them
when debugging a network.</t>

<section anchor="elements-influencing-responsiveness"><name>Elements influencing responsiveness</name>

<t>Due to the HTTP-centric approach of the measurement methodology a number of
factors come into play that influence the results. Namely, the client-side
networking stack (from the top of the HTTP-layer all the way down to the physical layer),
the network (including potential transparent HTTP "accelerators"), and the server-side
networking stack. The following outlines how each of these contributes to the responsiveness.</t>

<section anchor="client-side-influence"><name>Client side influence</name>

<t>As the driver of the measurement, the client-side networking stack can have a
large influence on the result. The biggest influence of the client comes
when measuring the responsiveness in the uplink direction. Load-generation will
cause queue-buildup in the transport layer as well as the HTTP layer. Additionally,
if the network's bottleneck is on the first hop, queue-buildup will happen at the
layers below the transport stack (e.g., NIC firmware).</t>

<t>Each of these queue build-ups may cause latency and thus low responsiveness.
A well designed networking stack would ensure that queue-buildup in the TCP layer
is kept at a bare minimum with solutions like TCP_NOTSENT_LOWAT <xref target="RFC9293"/>.
At the HTTP/2 layer it is important that the load-generating data is not interfering
with the latency-measuring probes. For example, the different streams should not
be stacked one after the other but rather be allowed to be multiplexed for
optimal latency. The queue-buildup at these layers would only influence latency
on the probes that are sent on the load-generating connections.</t>

<t>Below the transport layer many places have a potential queue build-up. It is
important to keep these queues at reasonable sizes or that they implement techniques
like FQ-Codel. Depending on the techniques used at these layers, the queue build-up
can influence latency on probes sent on load-generating connections as well as
separate connections. If flow-queuing is used at these layers, the impact on
separate connections will be negligible.</t>

</section>
<section anchor="network-influence"><name>Network influence</name>

<t>The network obviously is a large driver for the responsiveness result.
Propagation delay from the client to the server as well as queuing in the
bottleneck node will cause latency. Beyond these traditional sources of latency,
other factors may influence the results as well. Many networks deploy transparent
TCP Proxies, firewalls doing deep packet-inspection, HTTP "accelerators",...
As the methodology relies on the use of HTTP/2, the responsiveness metric will
be influenced by such devices as well.</t>

<t>The network will influence both kinds of latency probes that the responsiveness
tests sends out. Depending on the network's use of Smart Queue Management and whether
this includes flow-queuing or not, the latency probes on the load-generating
connections may be influenced differently than the probes on the separate
connections.</t>

</section>
<section anchor="server-side-influence"><name>Server side influence</name>

<t>Finally, the server-side introduces the same kind of influence on the responsiveness
as the client-side, with the difference that the responsiveness will be impacted
during the downlink load generation.</t>

</section>
</section>
<section anchor="root-causing-responsiveness"><name>Root-causing Responsiveness</name>

<t>Once a responsiveness result has been generated one might be tempted to try to localize
the source of a potential low responsiveness. The responsiveness measurement
is however aimed at providing a quick, top-level view of the responsiveness
under working conditions the way end-users experience it.
Localizing the source of low responsiveness involves however a set of different
tools and methodologies.</t>

<t>Nevertheless, the Responsiveness Test allows to gain some insight into what the
source of the latency is. The previous section described the elements that influence
the responsiveness. From there it became apparent that the latency measured
on the load-generating connections and the latency measured on separate connections
may be different due to the different elements.</t>

<t>For example, if the latency measured on separate connections is much less than the
latency measured on the load-generating connections, it is possible to narrow
down the source of the additional latency on the load-generating connections.
As long as the other elements of the network don't do flow-queueing, the additional
latency must come from the queue build-up at the HTTP and TCP layer.
This is because all other bottlenecks in the network that may cause a queue build-up
will be affecting the load-generating connections as well as the separate latency
probing connections in the same way.</t>

</section>
</section>
<section anchor="responsiveness-test-server-api"><name>Responsiveness Test Server API</name>

<t>The responsiveness measurement is built upon a foundation of standard protocols:
IP, TCP, TLS, HTTP/2.
On top of this foundation, a minimal amount of new “protocol” is defined,
merely specifying the URLs that used for GET and PUT in the process of
executing the test.</t>

<t>Both the client and the server MUST support HTTP/2 over TLS.
The client MUST be able to send a GET request and a POST.
The server MUST be able to respond to both of these
HTTP commands.
The server MUST have the ability to provide content upon a GET request.
The server MUST use a packet scheduling algorithm that minimizes internal queueing
to avoid affecting the client's measurement.</t>

<t>As clients and servers become deployed that use L4S congestion control
(e.g., TCP Prague with ECT(1) packet marking),
for their normal traffic when it is available, and fall back
to traditional loss-based congestion controls (e.g., Reno or CUBIC)
otherwise, the same strategy SHOULD be used for Responsiveness Test traffic.
This is RECOMMENDED so that the synthetic traffic generated
by the Responsiveness Test mimics real-world traffic for that server.</t>

<t>Delay-based congestion-control algorithms (e.g., Vegas, FAST, BBR)
SHOULD NOT be used for Responsiveness Test traffic because they take
much longer to discover the depth of the bottleneck buffers.
Delay-based congestion-control algorithms seek to mitigate the
effects of bufferbloat, by detecting and responding to early signs
of increasing round-trip delay, and reducing the amount of data they
have in flight before the bottleneck buffer fills up and overflows.
In a world where bufferbloat is common, this is a pragmatic
mitigation to allow software to work better in that environment.
However, that approach does not fix the underlying problem of bufferbloat;
it merely avoids it in some cases,
and allows the problem in the network to persist.
For a diagnostic tool made to identify symptoms of bufferbloat in the
network so that they can be fixed, using a transport protocol explicitly
designed to mask those symptoms would be a poor choice, and would
require the test to run for much longer to deliver the same results.</t>

<t>The server MUST respond to 4 URLs:</t>

<t><list style="numbers">
  <t>A "small" URL/response:
The server must respond with a status code of 200 and 1 byte in the body.
The actual message content is irrelevant.
The server SHOULD specify the content-type as application/octet-stream.
The server SHOULD minimize the size, in bytes, of the response fields that are encoded and sent on the wire.</t>
  <t>A "large" URL/response:
The server must respond with a status code of 200 and a body size of at least 8GB.
The server SHOULD specify the content-type as application/octet-stream.
The body can be bigger, and may need to grow as network speeds increases over time.
The actual message content is irrelevant.
The client will probably never completely download the object,
but will instead close the connection after reaching working condition
and making its measurements.</t>
  <t>An "upload" URL/response:
The server must handle a POST request with an arbitrary body size.
The server should discard the payload.
The actual POST message content is irrelevant.
The client will probably never completely upload the object,
but will instead close the connection after reaching working condition
and making its measurements.</t>
  <t>A .well-known URL <xref target="RFC8615"/> which contains configuration information for
the client to run the test (See <xref target="discovery"/>, below.)</t>
</list></t>

<t>The client begins the responsiveness measurement by querying for the JSON <xref target="RFC8259"/> configuration.
This supplies the URLs for creating the load-generating connections in
the upstream and downstream direction as well as the small object
for the latency measurements.</t>

</section>
<section anchor="discovery"><name>Responsiveness Test Server Discovery</name>

<t>It makes sense for a service provider (either an application service provider like a video conferencing service
or a network access provider like an ISP) to host Responsiveness Test Server instances on their
network so customers can determine what to expect about the quality of their connection to 
the service offered by that provider.
However, when a user performs a Responsiveness Test and determines
that they are suffering from poor responsiveness during the connection to that service,
the logical next questions might be,</t>

<t><list style="numbers">
  <t>"What’s causing my poor performance?"</t>
  <t>"Is it poor buffer management by my ISP?"</t>
  <t>"Is it poor buffer management in my home Wi-Fi Access point?"</t>
  <t>"Something to do with the service provider?"</t>
  <t>"Something else entirely?”</t>
</list></t>

<t>To help an end user answer these questions, it will be useful for test clients
to be able to easily discover Responsiveness Test Server instances running in various
places in the network (e.g., their home router, their Wi-Fi access point, their ISP's
head-end equipment, etc).</t>

<t>Consider this example scenario: A user has a cable modem
service offering 100 Mb/s download speed, connected via
gigabit Ethernet to one or more Wi-Fi access points in their home,
which then offer service to Wi-Fi client devices at different rates
depending on distance, interference from other traffic, etc.
By having the cable modem itself host a Responsiveness Test Server instance,
the user can then run a test between the cable modem and their computer
or smartphone, to help isolate whether bufferbloat they are experiencing
is occurring in equipment inside the home (like their Wi-Fi access points)
or somewhere outside the home.</t>

<section anchor="well-known-uniform-resource-identifier-uri-for-test-server-discovery"><name>Well-Known Uniform Resource Identifier (URI) For Test Server Discovery</name>

<t>Any organization that wishes to host their own instance of a Responsiveness Test Server can advertise that capability
by hosting at the network quality well-known URI a resource whose content type is application/json and contains a valid JSON object meeting the 
following criteria:</t>

<figure><artwork><![CDATA[
{
  "version": 1,
  "urls": {
    "large_download_url":"https://nq.example.com/api/v1/large",
    "small_download_url":"https://nq.example.com/api/v1/small",
    "upload_url":        "https://nq.example.com/api/v1/upload"
  }
  "test_endpoint": "hostname123.provider.com"
}
]]></artwork></figure>

<t>The server SHALL specify the content-type of the resource at the well-known URI as application/json.</t>

<t>The content of the "version" field SHALL be "1". Integer values greater than "1" are reserved
for future versions of this protocol.
The content of the "large_download_url", "small_download_url", and "upload_url" SHALL
all be validly formatted "http" or "https" URLs. See above for the semantics of the fields.
All of the fields in the sample configuration are required except "test_endpoint".
If the test server provider can pin all of the requests for a test run to a specific
host in the service (for a particular run), they can specify that host name in the
"test_endpoint" field.</t>

<t>For purposes of registration of the well-known URI <xref target="RFC8615"/>, the application name is "nq". The media type
of the resource at the well-known URI is "application/json" and the format of the resource is as specified
above. The URI scheme is "https". No additional path components, query strings or fragments are valid
for this well-known URI.</t>

</section>
<section anchor="dns-based-service-discovery-for-test-server-discovery"><name>DNS-Based Service Discovery for Test Server Discovery</name>

<t>To further aid the test client in discovering instances of the Responsiveness Test Server, organizations
wishing to host their own instances of the Test Server MAY advertise their availability using
DNS-Based Service Discovery <xref target="RFC6763"/> using conventional, unicast DNS <xref target="RFC1034"/> or multicast DNS <xref target="RFC6762"/>
on the organization network's local link(s).</t>

<t>The Responsiveness Test Service instances should advertise using the service type <xref target="RFC6335"/> 
"_nq._tcp".  Population of the appropriate DNS zone with the
relevant unicast discovery records can be performed
automatically using a Discovery Proxy <xref target="RFC8766"/>,
or in some scenarios simply by having a human
administrator manually enter the required records.</t>

<section anchor="example"><name>Example</name>

<t>An obscure service provider hosting a Responsiveness Test Server instance for their
organization (obs.cr) on the "rpm.obs.cr" host would return the following answers
to PTR and SRV conventional DNS queries:</t>

<figure><artwork><![CDATA[
$ nslookup -q=ptr _nq._tcp.obs.cr.
Non-authoritative answer:
_nq._tcp.obs.crname = rpm._nq._tcp.obs.cr.
$ nslookup -q=srv rpm._nq._tcp.obs.cr.
Non-authoritative answer:
rpm._nq._tcp.obs.crservice = 0 0 443 rpm.obs.cr.
]]></artwork></figure>

<t>Given those conventional DNS query responses, the client would proceed to access the rpm.obs.cr
host on port 443 at the .well-known/nq well-known URI to begin the test.</t>

</section>
</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TBD</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>IANA has been requested to record the service type
“_nq._tcp” (Network Quality)
for advertising and discovery of Responsiveness Test Server instances.</t>

</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>Special thanks go to Jeroen Schickendantz for his tireless
enthusiasm around the project and his contributions to this I-D and the development
of the Go responsiveness measurement tool.
We would also like to thank Rich Brown for his editorial pass over this I-D.
We also thank Erik Auerswald, Matt Mathis and Omer Shapira for their constructive feedback on the I-D.</t>

</section>


  </middle>

  <back>



    <references title='Informative References'>

<reference anchor="Bufferbloat" >
  <front>
    <title>Bufferbloat: Dark Buffers in the Internet</title>
    <author initials="J." surname="Gettys">
      <organization></organization>
    </author>
    <author initials="K." surname="Nichols">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="Communications of the ACM, Volume 55, Number 1 (2012)" value=""/>
</reference>


<reference anchor='RFC0793' target='https://www.rfc-editor.org/info/rfc793'>
  <front>
    <title>Transmission Control Protocol</title>
    <author fullname='J. Postel' initials='J.' surname='Postel'/>
    <date month='September' year='1981'/>
  </front>
  <seriesInfo name='RFC' value='793'/>
  <seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>

<reference anchor='RFC1034' target='https://www.rfc-editor.org/info/rfc1034'>
  <front>
    <title>Domain names - concepts and facilities</title>
    <author fullname='P. Mockapetris' initials='P.' surname='Mockapetris'/>
    <date month='November' year='1987'/>
    <abstract>
      <t>This RFC is the revised basic definition of The Domain Name System. It obsoletes RFC-882. This memo describes the domain style names and their used for host address look up and electronic mail forwarding. It discusses the clients and servers in the domain name system and the protocol used between them.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='13'/>
  <seriesInfo name='RFC' value='1034'/>
  <seriesInfo name='DOI' value='10.17487/RFC1034'/>
</reference>

<reference anchor='RFC6335' target='https://www.rfc-editor.org/info/rfc6335'>
  <front>
    <title>Internet Assigned Numbers Authority (IANA) Procedures for the Management of the Service Name and Transport Protocol Port Number Registry</title>
    <author fullname='M. Cotton' initials='M.' surname='Cotton'/>
    <author fullname='L. Eggert' initials='L.' surname='Eggert'/>
    <author fullname='J. Touch' initials='J.' surname='Touch'/>
    <author fullname='M. Westerlund' initials='M.' surname='Westerlund'/>
    <author fullname='S. Cheshire' initials='S.' surname='Cheshire'/>
    <date month='August' year='2011'/>
    <abstract>
      <t>This document defines the procedures that the Internet Assigned Numbers Authority (IANA) uses when handling assignment and other requests related to the Service Name and Transport Protocol Port Number registry. It also discusses the rationale and principles behind these procedures and how they facilitate the long-term sustainability of the registry.</t>
      <t>This document updates IANA's procedures by obsoleting the previous UDP and TCP port assignment procedures defined in Sections 8 and 9.1 of the IANA Allocation Guidelines, and it updates the IANA service name and port assignment procedures for UDP-Lite, the Datagram Congestion Control Protocol (DCCP), and the Stream Control Transmission Protocol (SCTP). It also updates the DNS SRV specification to clarify what a service name is and how it is registered. This memo documents an Internet Best Current Practice.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='165'/>
  <seriesInfo name='RFC' value='6335'/>
  <seriesInfo name='DOI' value='10.17487/RFC6335'/>
</reference>

<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
  <front>
    <title>Multicast DNS</title>
    <author fullname='S. Cheshire' initials='S.' surname='Cheshire'/>
    <author fullname='M. Krochmal' initials='M.' surname='Krochmal'/>
    <date month='February' year='2013'/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6762'/>
  <seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>

<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname='S. Cheshire' initials='S.' surname='Cheshire'/>
    <author fullname='M. Krochmal' initials='M.' surname='Krochmal'/>
    <date month='February' year='2013'/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6763'/>
  <seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>

<reference anchor='RFC8615' target='https://www.rfc-editor.org/info/rfc8615'>
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname='M. Nottingham' initials='M.' surname='Nottingham'/>
    <date month='May' year='2019'/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8615'/>
  <seriesInfo name='DOI' value='10.17487/RFC8615'/>
</reference>

<reference anchor='RFC8766' target='https://www.rfc-editor.org/info/rfc8766'>
  <front>
    <title>Discovery Proxy for Multicast DNS-Based Service Discovery</title>
    <author fullname='S. Cheshire' initials='S.' surname='Cheshire'/>
    <date month='June' year='2020'/>
    <abstract>
      <t>This document specifies a network proxy that uses Multicast DNS to automatically populate the wide-area unicast Domain Name System namespace with records describing devices and services found on the local link.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8766'/>
  <seriesInfo name='DOI' value='10.17487/RFC8766'/>
</reference>

<reference anchor='RFC8290' target='https://www.rfc-editor.org/info/rfc8290'>
  <front>
    <title>The Flow Queue CoDel Packet Scheduler and Active Queue Management Algorithm</title>
    <author fullname='T. Hoeiland-Joergensen' initials='T.' surname='Hoeiland-Joergensen'/>
    <author fullname='P. McKenney' initials='P.' surname='McKenney'/>
    <author fullname='D. Taht' initials='D.' surname='Taht'/>
    <author fullname='J. Gettys' initials='J.' surname='Gettys'/>
    <author fullname='E. Dumazet' initials='E.' surname='Dumazet'/>
    <date month='January' year='2018'/>
    <abstract>
      <t>This memo presents the FQ-CoDel hybrid packet scheduler and Active Queue Management (AQM) algorithm, a powerful tool for fighting bufferbloat and reducing latency.</t>
      <t>FQ-CoDel mixes packets from multiple flows and reduces the impact of head-of-line blocking from bursty traffic. It provides isolation for low-rate traffic such as DNS, web, and videoconferencing traffic. It improves utilisation across the networking fabric, especially for bidirectional traffic, by keeping queue lengths short, and it can be implemented in a memory- and CPU-efficient fashion across a wide range of hardware.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8290'/>
  <seriesInfo name='DOI' value='10.17487/RFC8290'/>
</reference>

<reference anchor='RFC8033' target='https://www.rfc-editor.org/info/rfc8033'>
  <front>
    <title>Proportional Integral Controller Enhanced (PIE): A Lightweight Control Scheme to Address the Bufferbloat Problem</title>
    <author fullname='R. Pan' initials='R.' surname='Pan'/>
    <author fullname='P. Natarajan' initials='P.' surname='Natarajan'/>
    <author fullname='F. Baker' initials='F.' surname='Baker'/>
    <author fullname='G. White' initials='G.' surname='White'/>
    <date month='February' year='2017'/>
    <abstract>
      <t>Bufferbloat is a phenomenon in which excess buffers in the network cause high latency and latency variation. As more and more interactive applications (e.g., voice over IP, real-time video streaming, and financial transactions) run in the Internet, high latency and latency variation degrade application performance. There is a pressing need to design intelligent queue management schemes that can control latency and latency variation, and hence provide desirable quality of service to users.</t>
      <t>This document presents a lightweight active queue management design called "PIE" (Proportional Integral controller Enhanced) that can effectively control the average queuing latency to a target value. Simulation results, theoretical analysis, and Linux testbed results have shown that PIE can ensure low latency and achieve high link utilization under various congestion situations. The design does not require per-packet timestamps, so it incurs very little overhead and is simple enough to implement in both hardware and software.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8033'/>
  <seriesInfo name='DOI' value='10.17487/RFC8033'/>
</reference>

<reference anchor='RFC8259' target='https://www.rfc-editor.org/info/rfc8259'>
  <front>
    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
    <author fullname='T. Bray' initials='T.' role='editor' surname='Bray'/>
    <date month='December' year='2017'/>
    <abstract>
      <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
      <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='90'/>
  <seriesInfo name='RFC' value='8259'/>
  <seriesInfo name='DOI' value='10.17487/RFC8259'/>
</reference>

<reference anchor='RFC9293' target='https://www.rfc-editor.org/info/rfc9293'>
  <front>
    <title>Transmission Control Protocol (TCP)</title>
    <author fullname='W. Eddy' initials='W.' role='editor' surname='Eddy'/>
    <date month='August' year='2022'/>
    <abstract>
      <t>This document specifies the Transmission Control Protocol (TCP). TCP is an important transport-layer protocol in the Internet protocol stack, and it has continuously evolved over decades of use and growth of the Internet. Over this time, a number of changes have been made to TCP as it was specified in RFC 793, though these have only been documented in a piecemeal fashion. This document collects and brings those changes together with the protocol specification from RFC 793. This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093, 6429, 6528, and 6691 that updated parts of RFC 793. It updates RFCs 1011 and 1122, and it should be considered as a replacement for the portions of those documents dealing with TCP requirements. It also updates RFC 5961 by adding a small clarification in reset handling while in the SYN-RECEIVED state. The TCP header control bits from RFC 793 have also been updated based on RFC 3168.</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='7'/>
  <seriesInfo name='RFC' value='9293'/>
  <seriesInfo name='DOI' value='10.17487/RFC9293'/>
</reference>

<reference anchor='RFC9330' target='https://www.rfc-editor.org/info/rfc9330'>
  <front>
    <title>Low Latency, Low Loss, and Scalable Throughput (L4S) Internet Service: Architecture</title>
    <author fullname='B. Briscoe' initials='B.' role='editor' surname='Briscoe'/>
    <author fullname='K. De Schepper' initials='K.' surname='De Schepper'/>
    <author fullname='M. Bagnulo' initials='M.' surname='Bagnulo'/>
    <author fullname='G. White' initials='G.' surname='White'/>
    <date month='January' year='2023'/>
    <abstract>
      <t>This document describes the L4S architecture, which enables Internet applications to achieve low queuing latency, low congestion loss, and scalable throughput control. L4S is based on the insight that the root cause of queuing delay is in the capacity-seeking congestion controllers of senders, not in the queue itself. With the L4S architecture, all Internet applications could (but do not have to) transition away from congestion control algorithms that cause substantial queuing delay and instead adopt a new class of congestion controls that can seek capacity with very little queuing. These are aided by a modified form of Explicit Congestion Notification (ECN) from the network. With this new architecture, applications can have both low latency and high throughput.</t>
      <t>The architecture primarily concerns incremental deployment. It defines mechanisms that allow the new class of L4S congestion controls to coexist with 'Classic' congestion controls in a shared network. The aim is for L4S latency and throughput to be usually much better (and rarely worse) while typically not impacting Classic performance.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='9330'/>
  <seriesInfo name='DOI' value='10.17487/RFC9330'/>
</reference>




    </references>


<section anchor="example-server-configuration"><name>Example Server Configuration</name>

<t>This section shows fragments of sample server configurations to host an responsiveness
measurement endpoint.</t>

<section anchor="apache-traffic-server"><name>Apache Traffic Server</name>

<t>Apache Traffic Server starting at version 9.1.0 supports configuration as a responsiveness
server. It requires the generator and the statichit plugin.</t>

<t>The sample remap configuration file then is:</t>

<figure><artwork><![CDATA[
map https://nq.example.com/api/v1/config \
    http://localhost/ \
    @plugin=statichit.so \
    @pparam=--file-path=config.example.com.json \
    @pparam=--mime-type=application/json

map https://nq.example.com/api/v1/large \
    http://localhost/cache/8589934592/ \
    @plugin=generator.so

map https://nq.example.com/api/v1/small \
    http://localhost/cache/1/ \
    @plugin=generator.so

map https://nq.example.com/api/v1/upload \
    http://localhost/ \
    @plugin=generator.so
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAEN5LWUAA9V9e3Mjx5Hn//Up6uDbEOkDMOS8rOGGwkvNjKRZz4MeUlZc
3F5oG+gi0J5GN9QPcmBZG/oaF+H9cvokl7/MrEc3QGp8t3Gx532YA6Crq7Ky
Mn/5rNlsZrqiK92Zfe/abV21xY2rXNvavspdY7+rmw9FtbLP6yovuoK+N9li
0bibT/99Xi+rbEMvyJvsupsVrrueFdvtZtYMBpidPDR51rkzs6T/v6qb3Zlt
u9yYtl9siralsa52Wxrm1curr8yyzuk1Z7anwT43xbY5s13Tt93Dk5NnNFDW
uOzMXjVZRa9oOnNL01o1db+lxy/shWuu62aTVUtn37is7Ru3cVVnPrgd/TCn
31SdayrXzV5gyjSFLqvy77Oyruj9O9eabXFm/0dXL6e2peEbd93SX7sN/vif
xmR9t66bM2PtjP7P2qJqz+zzub3Isna55o+EIs/XTdF29XadflU3tK7z7bZ0
NI/lnD9r6R2uO7PvKqdfXWTNB/tdtuOvl0VH1Hreb13TFVU9tc+zsqAlVkVm
nz05OX0sv6r7qgNZv62KzuX2siNCt7a+tucb1xTLjH/lNllRntnllmf0Txne
Nl/WGzNczvs5kW7nmmQ174lIWVkmn//nWErTbO5cxuWcNsG166JxyUouuz5r
uuE3/znWstQp3bmg7+b2m+yWzmCbrOe7grYl/ZgXQ++7cU1Lk8TLnhfVsqiq
rCvS9635odv1P/VLfDDvl3OX98YUFZ+gjkYAn3/ZX1+7ZlHWWXfGj8cjQP+Z
ydT+eW6/dl23awef/mFu3xbLdV3KxyqMJumI9gWoKp+09JTt1i6c0YnsBFHK
tZgVEbzebPqKCMfyB2vD78+fv5naP9Vlv3H2yZOpfdtvFiSwTu3Rw5PTh8c0
yvuvnp/87tmjM/nz9OTRY/3z6aNHT/yfv3v6MP7pf/v501P/g89/9/Sp//Ph
sxP/58mj8NuHT57pn88ehrc9e/SIfmtms5nNFsRW2ZLEzld1Y0lK7UjkZA1J
mMyW2fIDFjQUnVN7kzVF3bflzi7pBLrclNlqSr/uXLXcTWm77SLSc0q72tqF
cxWNs6xXVfEXeoI+yiqS4rSvXU9s4Kb0TEfcudnUFUu3bVdvmPp1nu0+ay0R
H3K1nZuXNA9LkpLomdncLbPcYZb41taVZfGZNXnxF6iGzi3X2J2SZGfZ8x5N
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
2Or/DfAkQPwPqAAA

-->

</rfc>

